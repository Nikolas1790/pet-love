/****************************************************************
Описание
	Вам дается квадратная сетка с обычными `.` и заблокированными `X` ячейками. 
  Ваша игровая фигура может перемещаться по любой строке или столбцу или диагонали, пока не достигнет края сетки или заблокированной ячейки. 
  Учитывая сетку, начальную и конечную позиции, постройте кратчайший путь, чтобы добраться до конечной позиции.

Например
	Дана сетка:
  .X.
  .X.
  ...

  Система координаты для данной сетки:
  0.0 0.1 0.2
  1.0 1.1	1.2
  2.0	2.1	2.2

  Начальна позиция 2.1 (отсчет идет с верхнего левого края сетки 0.0)
  Конечная позиция 0.2

  Путь движения между начальной и конечной точкой: (2.1) -> (1.2) -> (0.2)
  Ответ: [{x:2, y:1}, {x:1, y:2}, {x:0, y:2}]

	Задача
  	Завершите выполнение функции в редакторе. Функция должена вывести массив объектов координат которые обеспечивают минимальное количество шагов для перехода от начальной позиции к конечной и порядок массива соответвует движения по координатам.

  Ограничения
  	Длина сетки > 1 и < 100
    Координата начальной и конечной точки входит в предоставленную сетку.
    Задача должна быть решена с использованием ООП
    Плюсом будет использоватие TypeScript
  	
****************************************************************/

type Point = {
	x: number;
  y: number;
};

function runner(gridList: string[], start: Point, end: Point): Point[] {
    const directions = [
    { x: 1, y: 0 },  // Вниз
    { x: -1, y: 0 }, // Вверх
    { x: 0, y: 1 },  // Вправо
    { x: 0, y: -1 }, // Влево
    { x: 1, y: 1 },  // Диагональ вниз-вправо
    { x: -1, y: -1 }, // Диагональ вверх-влево
    { x: 1, y: -1 }, // Диагональ вниз-влево
    { x: -1, y: 1 }, // Диагональ вверх-вправо
  ];

  const rows = gridList.length; 
  const cols = gridList[0].length; 

  // Проверка допустимости точки
  const isValid = (point: Point): boolean => {
    return (
      point.x >= 0 &&
      point.x < rows &&
      point.y >= 0 &&
      point.y < cols &&
      gridList[point.x][point.y] === '.'
    );
  };

  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));
  const queue: { point: Point; path: Point[] }[] = [{ point: start, path: [start] }];

  visited[start.x][start.y] = true;

  while (queue.length > 0) {
    const { point, path } = queue.shift()!;

    // Если достигли конечной точки
    if (point.x === end.x && point.y === end.y) {
      return path;
    }

    for (const direction of directions) {
      const nextPoint: Point = { x: point.x + direction.x, y: point.y + direction.y };

      if (isValid(nextPoint) && !visited[nextPoint.x][nextPoint.y]) {
        visited[nextPoint.x][nextPoint.y] = true;
        queue.push({ point: nextPoint, path: [...path, nextPoint] });
      }
    }
  }
    return [];
}

/* const result = runner(
  [
    '.X.',
    '.X.',
    '...',
  ], 
  { x: 0, y: 2 },
  { x: 1, y: 0 },
); */

const result = runner(
  [
    '.X.',
    '.X.',
    '...',
  ], 
  { x: 2, y: 1 },
  { x: 0, y: 2 }
);

console.log("result", result)
$('#res').text(result);





import { WorkPhoto } from '../db/models/work-photo.schema.js';

export const getRandomWorkPhotos = async (count: number, language: string) => {
  let works = [];
  let attempts = 3; 
  
  while (works.length < count && attempts > 0) {
    works = await WorkPhoto.aggregate([
      { $sample: { size: 10 } }, // Увеличили выборку до 10
      {
        $lookup: {
          from: 'patterns',
          localField: 'pattern',
          foreignField: '_id',
          as: 'pattern',
        },
      },
      { $unwind: { path: '$pattern', preserveNullAndEmptyArrays: true } },

      {
        $lookup: {
          from: 'pattern_titles',
          localField: 'pattern.title',
          foreignField: '_id',
          as: 'title',
        },
      },
      { $unwind: { path: '$title', preserveNullAndEmptyArrays: true } },

      {
        $lookup: {
          from: 'works',
          localField: 'work',
          foreignField: '_id',
          as: 'work',
        },
      },
      { $unwind: { path: '$work', preserveNullAndEmptyArrays: true } },

      {
        $lookup: {
          from: 'masters',
          localField: 'work.master',
          foreignField: '_id',
          as: 'master',
        },
      },
      { $unwind: { path: '$master', preserveNullAndEmptyArrays: true } },

      {
        $group: {
          _id: '$pattern._id',
          workPhoto: { $first: '$$ROOT' }, 
        },
      },

      { $replaceRoot: { newRoot: '$workPhoto' } }, 

      { $limit: count },

      {
        $project: {
          _id: 1,
          imageUrl: 1,
          patternTitle: { $ifNull: [`$title.name.${language}`, 'Untitled'] },
          masterName: { $ifNull: [`$master.name.${language}`, 'Unknown'] },
        },
      },
    ]);

    attempts -= 1; 
  }

  return works;
};









import { Request, Response, NextFunction } from 'express';
import upload from './upload.js';
import cloudinary from '../services/cloudinary-config.js'; 
import fs from 'fs/promises';

// Middleware для загрузки до 3 изображений
export const uploadPatternImages = async (req: Request, res: Response, next: NextFunction) => {
  upload.array('images', 3)(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ message: 'File upload failed', error: err.message });
    }

    try {
      if (!req.files || !Array.isArray(req.files) || req.files.length !== 3) {
        return res.status(400).json({ message: 'You must upload exactly 3 images' });
      }

      const uploadedImages = await Promise.all(
        (req.files as Express.Multer.File[]).map(async (file) => {
          const cloudinaryResponse = await cloudinary.uploader.upload(file.path, {
            folder: 'bonny-art-patterns',
            format: 'jpeg',
            resource_type: 'image',
            allowed_formats: ['jpg', 'png', 'webp'],
          });

          await fs.unlink(file.path); // Удаляем временный файл после загрузки
          return cloudinaryResponse.secure_url;
        })
      );

      req.body.pictures = {
        main: { url: uploadedImages[0] },
        pattern: { url: { uk: uploadedImages[1], en: uploadedImages[2] } },
      };

      next();
    } catch (uploadError) {
      next(uploadError);
    }
  });
};
 
patternRouter.post(
  '/add-pattern',
  uploadPatternImages,
  validateBody(addPatternSchema),
  patternControllers.addPattern
);
