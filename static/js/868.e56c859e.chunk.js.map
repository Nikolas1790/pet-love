{"version":3,"file":"static/js/868.e56c859e.chunk.js","mappings":"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","sources":["components/NoticesItem/NoticesItem.styled.js","components/NoticesPetDetailItem/NoticesPetDetailItem.styled.js","components/NoticesPetDetailItem/NoticesPetDetailItem.jsx","components/Modals/ModalAttention/ModalAttention.styled.js","components/Modals/ModalAttention/ModalAttention.jsx","components/Modals/ModalNotice/ModalNotice.styled.js","components/StarRaiting/StarRaiting.styled.js","components/StarRaiting/StarRaiting.jsx","components/Buttons/ButtonLightOrange/ButtonLightOrange.styled.js","components/Buttons/ButtonLightOrange/ButtonLightOrange.jsx","components/Modals/ModalNotice/ModalNotice.jsx","components/NoticesItem/NoticesItem.jsx","redux/petLove/selector.js"],"sourcesContent":["import color from 'common/GlobalColors'\nimport styled from 'styled-components'\n\nexport const CardContainer = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  width: 363px;\n  height: 444px;\n  background:  ${color.white};\n  border-radius: 16px;\n  padding: 24px;\n`\n\nexport const ImgCard = styled.img`\n  width: 315px;\n  height: 178px;\n  border-radius: 16px; \n  background: ${color.orangeLight};\n  object-fit: cover; \n`\nexport const InfMainContainer = styled.div`\n  min-height: 194px; \n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nexport const PopularityIndicators = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nexport const TitleCard = styled.h3`\n  color: ${color.blackPrimaryCard};\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: 1;\n\n  margin-bottom: ${({ margin }) => (margin || '0px')};\n`\n\n\nexport const PopularityContainer = styled.div`\n  display: flex;\n  gap: 4px; \n`\n\nexport const PetDetails = styled.ul`\n  display: flex;\n  gap: 20px; \n  margin-bottom: ${({margin}) => margin || '16px'}; \n`\n\nexport const PetComments = styled.p`\n  color: ${color.blackPrimaryCard};\n  font-size: 14px;\n`\n\nexport const NavCard = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n`\n\nexport const FavoritBtn = styled.button.withConfig({\n  shouldForwardProp: (prop) => !['isFavorite'].includes(prop),\n})`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  border: none;\n  background: ${color.orangeLight};\n  \n  :hover,\n  :focus {\n    /* background: red; */\n  }\n\n  svg {\n    width: 18px;\n    height: 18px;\n\n    fill: ${({isFavorite}) => (isFavorite ? color.orangePrimary : 'transparent')};\n    stroke: ${color.orangePrimary};\n  }\n\n  /* fill: transparent;\n  stroke: ${color.orangePrimary};\n\n  :active{\n    fill: ${color.white};\n    stroke: ${color.blackPrimary};\n  } */\n\n`","import color from 'common/GlobalColors'\nimport styled from 'styled-components'\n\nexport const DetailTitle = styled.h5`\n  color:${color.blackPrimaryFiftyPercebt};\n  font-size: 10px;\n  line-height: 1.4;\n  letter-spacing: -0.02em;\n  margin-bottom: 2px;\n`\n\nexport const DetailValues = styled.p`\n  font-size: 12px;\n  line-height: 1.16;\n  letter-spacing: -0.02em;\n`","import { DetailTitle, DetailValues } from \"./NoticesPetDetailItem.styled\";\n\nexport default function PetDetailItem({ label, value }) {\n  return (\n    <li>\n      <DetailTitle>{label}</DetailTitle>\n      <DetailValues>{value}</DetailValues>\n    </li>\n  );\n}","import color from \"common/GlobalColors\";\nimport styled from \"styled-components\";\n\nexport const AttentionsModal = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 466px;\n  min-height: 434px;\n  background: ${color.white};\n  border-radius: 30px;\n  padding: 60px ;\n`;\n\nexport const DogSilhouette = styled.img`\n  width: 80px;\n  height: 80px;\n  margin-bottom: 20px;\n`;\n\nexport const TitleAttention = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.29;\n  margin-bottom: 20px;\n  color: ${color.orangePrimary};\n`;\n\nexport const TextAttention = styled.p`\ntext-align: center;\n  font-size: 14px;\n  line-height: 1.17;\n  margin-bottom: 28px;\n  color: ${color.blackPrimaryCard};\n  letter-spacing: -0.02em;\n`;\n\nexport const NavContainer = styled.div`\n  display: flex;\n  gap: 8px;\n`;","import XButton from \"components/XButton/XButton\";\nimport { AttentionsModal, DogSilhouette, NavContainer, TextAttention, TitleAttention } from \"./ModalAttention.styled\";\nimport ButtonNav from \"components/Buttons/ButtonNav/ButtonNav\";\nimport dogImg from '../../../img/PetInCircle/DogInСircle.png';\n\nexport default function ModalAttentions({ closeModals }) {\n  return (           \n    <AttentionsModal>\n      <DogSilhouette src={dogImg} alt=\"dog silhouette\" />\n\n      <TitleAttention>Attention</TitleAttention>\n      <TextAttention>We would like to remind you that certain functionality is available only to authorized users.If you have an account, please log in with your credentials. If you do not already have an account, you must register to access these features.</TextAttention>\n\n      <NavContainer>\n        <ButtonNav to='/login' label='LOG IN' width='140px'  />\n        <ButtonNav to='/register' label='REGISTRATION' width='140px' />\n      </NavContainer>\n\n      <XButton closeModals={closeModals} />\n    </AttentionsModal>\n  );\n};","import color from \"common/GlobalColors\";\nimport styled from \"styled-components\";\n\nexport const NoticeModal = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 473px;\n  height: 476px;  \n  background: ${color.white};\n  border-radius: 30px;\n  padding: 40px ;\n`;\n\nexport const ImgContainer = styled.div`\n  position:relative;\n`;\nexport const PetImg = styled.img`\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  margin-bottom: 16px;\n`;\nexport const CategoryBlock = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${color.orangePrimary};\n  background: ${color.orangeLight};\n  padding: 8px 14px;\n  border-radius: 30px; \n\n`;\n\nexport const PetCategory = styled.p`\n  font-size: 14px;\n  line-height: 1.29;\n  letter-spacing: -0.02em;\n`;\n\nexport const ReitingContainer = styled.div`\n  display: flex;\n  gap: 4px;\n  margin-bottom: 20px;\n`;\n\nexport const BtnContainer = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-top: auto;\n`;","import styled from \"styled-components\";\n\nexport const Star = styled.svg`\n  width: 20px;\n  height: 20px;\n  fill: ${(props) => (props.filled === \"true\" ? \"gold\" : \"gray\")}; \n`;\n","import React from 'react';\nimport sprite from '../../img/sprite.svg';\nimport { Star } from './StarRaiting.styled';\n\nconst StarRating = ({ rating }) => {\n  const totalStars = 5;\n  return (\n    <div>\n      {[...Array(totalStars)].map((_, index) => (\n        <Star key={index} filled={index < rating ? \"true\" : ''}>\n          <use href={`${sprite}#icon-star`} />\n        </Star>\n      ))}\n    </div>\n  );\n};\n\nexport default StarRating;","import color from 'common/GlobalColors'\nimport styled from 'styled-components'\n\nexport const LightBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.25;\n  letter-spacing: -0.03em;;\n  height: 50px;\n  width: ${({ width }) => width || '100%'};\n  border-radius: 30px;\n  /* border: 1px solid ${({ home }) => home  ? color.whiteTransparencyZeroFour : 'none'}; */\n  color: ${color.orangePrimary};\n  background: ${color.orangeLight};\n\n  transition: all 0.25s linear;\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    background: ${color.orangeDim };\n    /* color: ${({ label }) =>label === 'REGISTRATION' ? color.orangePrimary : color.white}; */\n    outline: none;\n  }\n`","import { LightBtn } from \"./ButtonLightOrange.styled\";\n\nexport default function ButtonLightOrange({ className, label, onClick, width }) {\n  return (    \n    <LightBtn className={className} onClick={onClick} width={width} label={label} >\n      {label}\n    </LightBtn>    \n  )\n}","import XButton from \"components/XButton/XButton\";\nimport { BtnContainer, CategoryBlock, ImgContainer, NoticeModal, PetCategory, PetImg, ReitingContainer } from \"./ModalNotice.styled\";\nimport { PetComments, PetDetails, TitleCard } from \"components/NoticesItem/NoticesItem.styled\";\nimport PetDetailItem from \"components/NoticesPetDetailItem/NoticesPetDetailItem\";\nimport StarRating from \"components/StarRaiting/StarRaiting\";\nimport ButtonOrange from \"components/Buttons/ButtonOrange/ButtonOrange\";\nimport ButtonLightOrange from \"components/Buttons/ButtonLightOrange/ButtonLightOrange\";\nimport { useDispatch } from \"react-redux\";\nimport {  noticesFavorite, noticesFavoriteDell } from \"../../../redux/petLove/operations\";\n\nexport default function ModalNotice({ closeModals, card, petDetailsData, isFavorite }) {\n  const dispatch = useDispatch();\n\n  const handleAddToFavorite = (item) => {\n    if(!isFavorite){\n      dispatch(noticesFavorite(item));\n    } else{\n      dispatch(noticesFavoriteDell(item));\n    }\n  };\n\n  return (           \n    <NoticeModal>  \n      <ImgContainer>\n        <PetImg src={card.imgURL} alt=\"pet\" />\n        <CategoryBlock>\n          <PetCategory>{card.category}</PetCategory>\n        </CategoryBlock>\n      </ImgContainer>    \n\n      <TitleCard margin=\"10px\">{card.title}</TitleCard>\n      <ReitingContainer>\n        <StarRating rating={Math.min(card.popularity, 5)} />\n        <p>{card.popularity}</p>\n      </ReitingContainer>             \n      \n      <PetDetails margin=\"18px\">\n        {petDetailsData.slice(0, 4).map((detail) => (\n          <PetDetailItem key={detail.label} label={detail.label} value={detail.value} />\n        ))}\n      </PetDetails>\n      <PetComments>{card.comment}</PetComments>\n\n      <BtnContainer>\n        <ButtonOrange \n          label={isFavorite ?  \"Remove\" : 'Add to'} \n          width='160px' \n          onClick={() => handleAddToFavorite(card._id)} \n          isFavorite={isFavorite}\n        />\n        <ButtonLightOrange label='Contact'  width='160px' />\n      </BtnContainer>\n\n      <XButton closeModals={closeModals} />\n    </NoticeModal>\n  );\n};","import { CardContainer, FavoritBtn, ImgCard, InfMainContainer, NavCard, PetComments, PetDetails, PopularityContainer, PopularityIndicators, TitleCard } from \"./NoticesItem.styled\";\nimport sprite from '../../img/sprite.svg';\nimport PetDetailItem from \"components/NoticesPetDetailItem/NoticesPetDetailItem\";\nimport ButtonOrange from \"components/Buttons/ButtonOrange/ButtonOrange\";\nimport PortalModal from \"components/PortalModal/PortalModal\";\nimport { useEffect, useState } from \"react\";\nimport ModalAttentions from \"components/Modals/ModalAttention/ModalAttention\";\nimport ModalNotice from \"components/Modals/ModalNotice/ModalNotice\";\nimport { selectToken, selectUser } from \"../../redux/auth/selectorAuth\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Star } from \"components/StarRaiting/StarRaiting.styled\";\nimport { noticesFavorite, noticesFavoriteDell } from \"../../redux/petLove/operations\";\nimport { selectFavoritePets } from \"../../redux/petLove/selector\";\nimport { currentFull } from \"../../redux/auth/operationsAuth\";\n\nexport default function NoticesItem({card}) {  \n  const [openModal, setOpenModal] = useState(false);\n  const [openModalNotice, setOpenModalNotice] = useState(false);\n  const token = useSelector(selectToken);\n  const dispatch = useDispatch();\n\n  let user = useSelector(selectUser);\n  let favoritesList = useSelector(selectFavoritePets);\n\n  const isFavorite = favoritesList.includes(card._id) || user?.noticesFavorites?.some(i => i._id === card._id);\n\n  useEffect(() => {\n    if (token && !user.name ) {\n      dispatch(currentFull());\n    }\n  }, [dispatch, token, user.name, isFavorite]);\n\n  // Функція для форматування дати\n  const formatDate = (dateString) => {\n    if(card.birthday) {\n      const dateParts = dateString.split(\"-\");\n      return `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n    } else{\n      return 'unknown';\n    }\n  };\n\n  const getFirstName = (fullName) => {\n    return fullName.split(\" \")[0]; \n  };\n\n  // Створюємо масив об'єктів з label та value\n  const petDetailsData = [\n    { label: \"Name\", value: getFirstName(card.name) },\n    { label: \"Birthday\", value: formatDate(card.birthday) },\n    { label: \"Sex\", value: card.sex },\n    { label: \"Species\", value: card.species },\n    { label: \"Category\", value: card.category }\n  ];\n\n  const handleButtonClick = () => {\n    if (token) {\n      setOpenModalNotice(true);\n    } else {\n      setOpenModal(true);\n    }\n  };\n\n  const handleButtonFavorite = (i) => {\n    if (token) {\n      if(!isFavorite){\n        dispatch(noticesFavorite(i));\n      } else{\n        dispatch(noticesFavoriteDell(i));\n      }\n    } else {\n      setOpenModal(true); \n    }\n  };\n  \n  return (\n    <CardContainer>\n      <ImgCard src={card.imgURL} alt='pet' />\n      <InfMainContainer>\n        <div>\n          <PopularityIndicators>\n            <TitleCard>{card.title}</TitleCard>\n\n            <PopularityContainer>\n              <Star filled=\"true\">\n                <use href={`${sprite}#icon-star`} />\n              </Star>\n              <p>{card.popularity}</p>\n            </PopularityContainer>        \n          </PopularityIndicators>\n          <PetDetails>\n            {petDetailsData.map((detail) => (\n              <PetDetailItem key={detail.label} label={detail.label} value={detail.value} />\n            ))}\n          </PetDetails>\n          <PetComments>{card.comment}</PetComments>\n        </div>\n\n        <NavCard>\n          <ButtonOrange label='Learn more'  onClick={handleButtonClick} />\n          <FavoritBtn  onClick={() => handleButtonFavorite(card._id)} isFavorite={isFavorite}  >\n            <svg >\n              <use href={`${sprite}#icon-heart-add`} />\n            </svg>\n          </FavoritBtn>\n        </NavCard>\n      </InfMainContainer>\n      \n      <PortalModal active={openModalNotice} setActive={setOpenModalNotice}>\n        <ModalNotice closeModals={() => setOpenModalNotice()} card={card} petDetailsData={petDetailsData} isFavorite={isFavorite} />\n      </PortalModal>\n      <PortalModal active={openModal} setActive={setOpenModal}>\n        <ModalAttentions closeModals={() => setOpenModal()} />\n      </PortalModal>\n    </CardContainer> \n  );\n}  ","export const selectFriendsInf = (state) => state.pet.friendsData;\n\nexport const selectNewsInf = (state) => state.pet.newsData;\n\nexport const selectNoticesInf = (state) => state.pet.noticesData;\n\nexport const selectFavoritePets = (state) => state.pet.favoritsPets;\n\nexport const selectCategoriesList = (state) => state.pet.categoriesList;\n\nexport const selectSexList = (state) => state.pet.sex;\n\nexport const selectSpeciesList = (state) => state.pet.species;\n\nexport const selectCitiesList = (state) => state.pet.cities;\n\n\n"],"names":["CardContainer","styled","_templateObject","_taggedTemplateLiteral","color","ImgCard","_templateObject2","InfMainContainer","_templateObject3","PopularityIndicators","_templateObject4","TitleCard","_templateObject5","_ref","margin","PopularityContainer","_templateObject6","PetDetails","_templateObject7","_ref2","PetComments","_templateObject8","NavCard","_templateObject9","FavoritBtn","shouldForwardProp","prop","includes","_templateObject10","_ref3","isFavorite","DetailTitle","DetailValues","PetDetailItem","label","value","_jsxs","children","_jsx","AttentionsModal","DogSilhouette","TitleAttention","TextAttention","NavContainer","ModalAttentions","closeModals","src","alt","ButtonNav","to","width","XButton","NoticeModal","ImgContainer","PetImg","CategoryBlock","PetCategory","ReitingContainer","BtnContainer","Star","props","filled","rating","Array","map","_","index","href","concat","sprite","LightBtn","home","ButtonLightOrange","className","onClick","ModalNotice","card","petDetailsData","dispatch","useDispatch","imgURL","category","title","StarRating","Math","min","popularity","slice","detail","comment","ButtonOrange","handleAddToFavorite","item","_id","noticesFavoriteDell","noticesFavorite","NoticesItem","_user$noticesFavorite","openModal","setOpenModal","useState","openModalNotice","setOpenModalNotice","token","useSelector","selectToken","user","selectUser","selectFavoritePets","noticesFavorites","some","i","useEffect","name","currentFull","fullName","split","dateString","birthday","dateParts","formatDate","sex","species","handleButtonClick","handleButtonFavorite","PortalModal","active","setActive","selectFriendsInf","state","pet","friendsData","selectNewsInf","newsData","selectNoticesInf","noticesData","favoritsPets","selectCategoriesList","categoriesList","selectSexList","selectSpeciesList","selectCitiesList","cities"],"sourceRoot":""}